package org.campagnelab.antlr.tomps.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AlternativeMapper = 0;
  public static final int ChildDestination = 1;
  public static final int ConceptMapper = 2;
  public static final int ConvertToMPS = 3;
  public static final int ConverterName = 4;
  public static final int Destination = 5;
  public static final int ExampleConcept = 6;
  public static final int IToConverter = 7;
  public static final int LabeledElementSource = 8;
  public static final int LexerRuleSource = 9;
  public static final int Mapper = 10;
  public static final int NewVisitor = 11;
  public static final int Operator = 12;
  public static final int ParserRuleSource = 13;
  public static final int PropertyDestination = 14;
  public static final int Source = 15;
  public static final int TextGenHelper = 16;
  public static final int ToBooleanDestination = 17;
  public static final int ToFloatDestination = 18;
  public static final int ToIntDestination = 19;
  public static final int ToOperator = 20;
  public static final int TrimCharacters = 21;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x932d719ce93144d5L, 0x990ce115f79b5942L);
    builder.put(0x6a1bb02ea606232bL, AlternativeMapper);
    builder.put(0x4aaf5f3861bb9099L, ChildDestination);
    builder.put(0x69d936b00a0eba02L, ConceptMapper);
    builder.put(0x6a1bb02ea6061b82L, ConvertToMPS);
    builder.put(0x11106e60092f2f79L, ConverterName);
    builder.put(0x4aaf5f3861bb9098L, Destination);
    builder.put(0x4aaf5f3861a15c43L, ExampleConcept);
    builder.put(0x11106e6008bd1727L, IToConverter);
    builder.put(0x4aaf5f3861adfe77L, LabeledElementSource);
    builder.put(0x6912564f422833dbL, LexerRuleSource);
    builder.put(0x7c18b9e1882f81cL, Mapper);
    builder.put(0x11106e6008e38ee7L, NewVisitor);
    builder.put(0x195a5f84d619bfbdL, Operator);
    builder.put(0x3875e55a78eeb7feL, ParserRuleSource);
    builder.put(0x27b12e38d7577b90L, PropertyDestination);
    builder.put(0x3875e55a78eeb7ddL, Source);
    builder.put(0x3ec2bbae1a5cc460L, TextGenHelper);
    builder.put(0x443e8c43ffcc4608L, ToBooleanDestination);
    builder.put(0x443e8c43ffcf6763L, ToFloatDestination);
    builder.put(0x443e8c43ffc0edbfL, ToIntDestination);
    builder.put(0x6c9855e848a0c58L, ToOperator);
    builder.put(0x3ec2bbae1bba463bL, TrimCharacters);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
