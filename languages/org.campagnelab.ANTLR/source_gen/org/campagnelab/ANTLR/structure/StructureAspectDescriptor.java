package org.campagnelab.ANTLR.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAlternative = createDescriptorForAlternative();
  /*package*/ final ConceptDescriptor myConceptAlternatives = createDescriptorForAlternatives();
  /*package*/ final ConceptDescriptor myConceptBlockSet = createDescriptorForBlockSet();
  /*package*/ final ConceptDescriptor myConceptDot = createDescriptorForDot();
  /*package*/ final ConceptDescriptor myConceptGrammar = createDescriptorForGrammar();
  /*package*/ final ConceptDescriptor myConceptHasOptionalParams = createDescriptorForHasOptionalParams();
  /*package*/ final ConceptDescriptor myConceptLabeledElement = createDescriptorForLabeledElement();
  /*package*/ final ConceptDescriptor myConceptLexerAlt = createDescriptorForLexerAlt();
  /*package*/ final ConceptDescriptor myConceptLexerAltList = createDescriptorForLexerAltList();
  /*package*/ final ConceptDescriptor myConceptLexerBlock = createDescriptorForLexerBlock();
  /*package*/ final ConceptDescriptor myConceptLexerElement = createDescriptorForLexerElement();
  /*package*/ final ConceptDescriptor myConceptLexerRule = createDescriptorForLexerRule();
  /*package*/ final ConceptDescriptor myConceptLexerRuleBlock = createDescriptorForLexerRuleBlock();
  /*package*/ final ConceptDescriptor myConceptLexerRuleRef = createDescriptorForLexerRuleRef();
  /*package*/ final ConceptDescriptor myConceptLexerRuleRefByName = createDescriptorForLexerRuleRefByName();
  /*package*/ final ConceptDescriptor myConceptLexerToken = createDescriptorForLexerToken();
  /*package*/ final ConceptDescriptor myConceptNotSet = createDescriptorForNotSet();
  /*package*/ final ConceptDescriptor myConceptParentheses = createDescriptorForParentheses();
  /*package*/ final ConceptDescriptor myConceptParserRule = createDescriptorForParserRule();
  /*package*/ final ConceptDescriptor myConceptParserRuleBlock = createDescriptorForParserRuleBlock();
  /*package*/ final ConceptDescriptor myConceptParserRuleRef = createDescriptorForParserRuleRef();
  /*package*/ final ConceptDescriptor myConceptREGEXP = createDescriptorForREGEXP();
  /*package*/ final ConceptDescriptor myConceptRange = createDescriptorForRange();
  /*package*/ final ConceptDescriptor myConceptRule = createDescriptorForRule();
  /*package*/ final ConceptDescriptor myConceptRuleRefByName = createDescriptorForRuleRefByName();
  /*package*/ final ConceptDescriptor myConceptSequence = createDescriptorForSequence();
  /*package*/ final ConceptDescriptor myConceptSetElement = createDescriptorForSetElement();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  /*package*/ final ConceptDescriptor myConceptToTextOutput = createDescriptorForToTextOutput();
  /*package*/ final ConceptDescriptor myConceptToken = createDescriptorForToken();
  /*package*/ final ConceptDescriptor myConceptTokenRef = createDescriptorForTokenRef();
  /*package*/ final ConceptDescriptor myConceptTokenSpec = createDescriptorForTokenSpec();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAlternative, myConceptAlternatives, myConceptBlockSet, myConceptDot, myConceptGrammar, myConceptHasOptionalParams, myConceptLabeledElement, myConceptLexerAlt, myConceptLexerAltList, myConceptLexerBlock, myConceptLexerElement, myConceptLexerRule, myConceptLexerRuleBlock, myConceptLexerRuleRef, myConceptLexerRuleRefByName, myConceptLexerToken, myConceptNotSet, myConceptParentheses, myConceptParserRule, myConceptParserRuleBlock, myConceptParserRuleRef, myConceptREGEXP, myConceptRange, myConceptRule, myConceptRuleRefByName, myConceptSequence, myConceptSetElement, myConceptStringLiteral, myConceptToTextOutput, myConceptToken, myConceptTokenRef, myConceptTokenSpec);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.Alternative:
        return myConceptAlternative;
      case LanguageConceptSwitch.Alternatives:
        return myConceptAlternatives;
      case LanguageConceptSwitch.BlockSet:
        return myConceptBlockSet;
      case LanguageConceptSwitch.Dot:
        return myConceptDot;
      case LanguageConceptSwitch.Grammar:
        return myConceptGrammar;
      case LanguageConceptSwitch.HasOptionalParams:
        return myConceptHasOptionalParams;
      case LanguageConceptSwitch.LabeledElement:
        return myConceptLabeledElement;
      case LanguageConceptSwitch.LexerAlt:
        return myConceptLexerAlt;
      case LanguageConceptSwitch.LexerAltList:
        return myConceptLexerAltList;
      case LanguageConceptSwitch.LexerBlock:
        return myConceptLexerBlock;
      case LanguageConceptSwitch.LexerElement:
        return myConceptLexerElement;
      case LanguageConceptSwitch.LexerRule:
        return myConceptLexerRule;
      case LanguageConceptSwitch.LexerRuleBlock:
        return myConceptLexerRuleBlock;
      case LanguageConceptSwitch.LexerRuleRef:
        return myConceptLexerRuleRef;
      case LanguageConceptSwitch.LexerRuleRefByName:
        return myConceptLexerRuleRefByName;
      case LanguageConceptSwitch.LexerToken:
        return myConceptLexerToken;
      case LanguageConceptSwitch.NotSet:
        return myConceptNotSet;
      case LanguageConceptSwitch.Parentheses:
        return myConceptParentheses;
      case LanguageConceptSwitch.ParserRule:
        return myConceptParserRule;
      case LanguageConceptSwitch.ParserRuleBlock:
        return myConceptParserRuleBlock;
      case LanguageConceptSwitch.ParserRuleRef:
        return myConceptParserRuleRef;
      case LanguageConceptSwitch.REGEXP:
        return myConceptREGEXP;
      case LanguageConceptSwitch.Range:
        return myConceptRange;
      case LanguageConceptSwitch.Rule:
        return myConceptRule;
      case LanguageConceptSwitch.RuleRefByName:
        return myConceptRuleRefByName;
      case LanguageConceptSwitch.Sequence:
        return myConceptSequence;
      case LanguageConceptSwitch.SetElement:
        return myConceptSetElement;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      case LanguageConceptSwitch.ToTextOutput:
        return myConceptToTextOutput;
      case LanguageConceptSwitch.Token:
        return myConceptToken;
      case LanguageConceptSwitch.TokenRef:
        return myConceptTokenRef;
      case LanguageConceptSwitch.TokenSpec:
        return myConceptTokenSpec;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForAlternative() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Alternative", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL);
    b.class_(false, false, false);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419535385999");
    b.prop("label", 0x6d831d6acef0ba05L, "7891183316658862597");
    b.prop("hasLabel", 0x6d831d6acf051327L, "7891183316660196135");
    b.aggregate("rhs", 0x631eebe3113b4590L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L).optional(true).ordered(true).multiple(false).origin("7142405419535386000").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAlternatives() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Alternatives", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419534833730");
    b.aggregate("oneOf", 0x631eebe31132d969L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL).optional(false).ordered(true).multiple(true).origin("7142405419534834025").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBlockSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "BlockSet", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a14471dL);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.SetElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/2212714499869525789");
    b.aggregate("elements", 0x1eb5241d3a155e67L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L).optional(false).ordered(true).multiple(true).origin("2212714499869597287").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Dot", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88033f2L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1684107016605283314");
    b.alias(".");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGrammar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Grammar", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419534787241");
    b.aggregate("tokens", 0x7c18b9e171fc275L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f1505L).optional(true).ordered(true).multiple(false).origin("558881339879703157").done();
    b.aggregate("rules", 0x631eebe31132d83bL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648aaL).optional(true).ordered(true).multiple(true).origin("7142405419534833723").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHasOptionalParams() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "HasOptionalParams", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L);
    b.class_(false, false, false);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/8753890222134504504");
    b.prop("isOptional", 0x797c10c6e517b02cL, "8753890222134505516");
    b.prop("acceptMultiple", 0x797c10c6e517bbd3L, "8753890222134508499");
    b.prop("plus", 0x797c10c6e517bcdaL, "8753890222134508762");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLabeledElement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LabeledElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/558881339889629829");
    b.prop("operator", 0x7c18b9e17ba7f13L, "558881339889843987");
    b.aggregate("element", 0x7c18b9e17b7c72fL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L).optional(false).ordered(true).multiple(false).origin("558881339889665839").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerAlt() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerAlt", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a8872629L);
    b.class_(false, false, false);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1684107016605738537");
    b.aggregate("elements", 0x175f2668a887262aL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L).optional(false).ordered(true).multiple(true).origin("1684107016605738538").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerAltList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerAltList", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/5643127000001205075");
    b.aggregate("alternatives", 0x4e506a1ba17cd759L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a8872629L).optional(false).ordered(true).multiple(true).origin("5643127000001206105").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x155bede063d71d12L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1539085245680655634");
    b.aggregate("elements", 0x155bede063d71d13L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L).optional(false).ordered(true).multiple(true).origin("1539085245680655635").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerElement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/5643126999999269540");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerRule", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648b1L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.Rule", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648aaL);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1684107016605681841");
    b.aggregate("rhs", 0x175f2668a886ac7dL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a886ac85L).optional(false).ordered(true).multiple(false).origin("1684107016605707389").done();
    b.alias("lexerRule");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerRuleBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a886ac85L);
    b.class_(false, false, false);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1684107016605707397");
    b.aggregate("alternatives", 0x175f2668a886aca6L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L).optional(false).ordered(true).multiple(false).origin("1684107016605707430").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerRuleRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerRuleRef", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a890ef9eL);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1684107016606379934");
    b.associate("rule", 0x175f2668a890ef9fL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648b1L).optional(false).origin("1684107016606379935").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerRuleRefByName() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerRuleRefByName", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17206d3L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/5643127000000497363");
    b.prop("name", 0x4e506a1ba1720e58L, "5643127000000499288");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLexerToken() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "LexerToken", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e6560L);
    b.class_(false, true, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419535590752");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "NotSet", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba9332cba7L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/987964775448365991");
    b.aggregate("set", 0xdb5f4ba9332cbf4L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L).optional(false).ordered(true).multiple(false).origin("987964775448366068").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParentheses() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Parentheses", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de529f8L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/2214335295231699448");
    b.aggregate("content", 0x1ebae6380de52a0fL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L).optional(false).ordered(true).multiple(false).origin("2214335295231699471").done();
    b.alias("(");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParserRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "ParserRule", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d838L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.Rule", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648aaL);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419534833720");
    b.aggregate("rhs", 0x631eebe31132d844L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L).optional(false).ordered(true).multiple(false).origin("7142405419534833732").done();
    b.alias("parserRule");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParserRuleBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.class_(false, true, false);
    b.super_("org.campagnelab.ANTLR.structure.HasOptionalParams", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419534833731");
    b.prop("isOptional_old", 0x631eebe3113c4245L, "7142405419535450693");
    b.prop("acceptMultiple_old", 0x631eebe3113c4247L, "7142405419535450695");
    b.prop("plus_old", 0x72827882b897b9d5L, "8251289970134202837");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParserRuleRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "ParserRuleRef", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d966L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419534834022");
    b.associate("rule", 0x631eebe31132d967L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d838L).optional(false).origin("7142405419534834023").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForREGEXP() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "REGEXP", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.SetElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419535607099");
    b.prop("regexp", 0x631eebe3113ea679L, "7142405419535607417");
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Range", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba93652fedL);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.SetElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/987964775451668461");
    b.aggregate("start", 0xdb5f4ba936530dcL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL).optional(false).ordered(true).multiple(false).origin("987964775451668700").done();
    b.aggregate("end", 0xdb5f4ba936530deL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL).optional(false).ordered(true).multiple(false).origin("987964775451668702").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Rule", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648aaL);
    b.class_(false, true, false);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/1684107016605681834");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRuleRefByName() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "RuleRefByName", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de70d78L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/2214335295231823224");
    b.prop("name", 0x1ebae6380de70d79L, "2214335295231823225");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSequence() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Sequence", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419534833734");
    b.aggregate("of", 0x631eebe31132d96bL).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L).optional(false).ordered(true).multiple(true).origin("7142405419534834027").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetElement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "SetElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L);
    b.class_(false, true, false);
    b.super_("org.campagnelab.ANTLR.structure.LexerToken", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e6560L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/2212714499868638905");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "StringLiteral", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.SetElement", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a06beb9L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/7142405419535590783");
    b.prop("literal", 0x631eebe3113e6580L, "7142405419535590784");
    b.alias("'");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForToTextOutput() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "ToTextOutput", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.interface_();
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/5668935624399898344");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForToken() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "Token", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f2eb3L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/558881339879665331");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTokenRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "TokenRef", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e172f3f03L);
    b.class_(false, false, false);
    b.super_("org.campagnelab.ANTLR.structure.ParserRuleBlock", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
    b.parent(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/558881339880718083");
    b.associate("token", 0x7c18b9e172f3f04L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f2eb3L).optional(false).origin("558881339880718084").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTokenSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.campagnelab.ANTLR", "TokenSpec", 0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f1505L);
    b.class_(false, false, false);
    b.origin("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)/558881339879658757");
    b.aggregate("tokens", 0x7c18b9e171f2eb1L).target(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f2eb3L).optional(false).ordered(true).multiple(true).origin("558881339879665329").done();
    b.alias("tokens");
    return b.create();
  }
}
