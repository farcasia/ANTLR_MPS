package org.campagnelab.ANTLR.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Alternative_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Alternatives_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Dot_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Grammar_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new HasOptionalParams_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new LabeledElement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new LexerAlt_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new LexerAltList_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new LexerBlock_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new LexerElement_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new LexerRule_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new LexerRuleBlock_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new LexerRuleRef_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new LexerRuleRefByName_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new NotSet_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Parentheses_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ParserRule_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ParserRuleBlock_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new ParserRuleRef_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new REGEXP_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Range_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new RuleRefByName_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Sequence_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Token_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new TokenRef_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new TokenSpec_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0c.index(cncpt)) {
      case 0:
        if (true) {
          if ("org.campagnelab.ANTLR.editor.OptionalParamEditor".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new OptionalParamEditor());
          }
        }
        break;
      case 1:
        if (true) {
          if ("org.campagnelab.ANTLR.editor.RHSEditor".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new RHSEditor());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88033f2L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a8872629L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x155bede063d71d12L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648b1L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a886ac85L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a890ef9eL), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17206d3L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba9332cba7L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de529f8L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d838L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d966L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba93652fedL), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de70d78L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f2eb3L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e172f3f03L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f1505L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0c = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L), MetaIdFactory.conceptId(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L)).seal();
}
